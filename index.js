import fetch from "node-fetch";
import { TranslationServiceClient } from "@google-cloud/translate";
import { Configuration, OpenAIApi } from "openai";
import TelegramBot from "node-telegram-bot-api";
import Replicate from "replicate-js";
import google from "./search.js";
import {
    writeOpened,
    readOpened,
    writeTrial,
    readTrial,
    writeSkip,
    readSkip,
    writeContext,
    readContext,
    readChatSuffix,
    writeChatSuffix,
    writeTemp,
    readTemp,
    writeTime,
    readTime,
    writeMoney,
    readMoney,
} from "./io.js";
import dotenv from "dotenv";
dotenv.config({ override: true });

let CONTEXT_SIZE = 200; // increase can negatively affect your bill, 1 Russian char == 1 token
let MAX_TOKENS = 700;
let MAX_LENGTH = 300;
let PREMIUM = 1.5;
let MAX_REQUESTS = 500;
let MAX_MONEY = 3.0;
let MAX_GROUP_MONEY = 6.0;
let MAX_GROUP_REQUESTS = 1000;
let MAX_PER_MINUTE = 15;
let MAX_PER_HOUR = 5;
let CONTEXT_TIMEOUT = 3600;
let REQUEST_PRICE = 0.0066;
let PROMO = ["-1001776618845", "-1001716321937"];
let ADMIN = "Extender777";
let GOOGLE_PROJECT = `projects/${process.env.GOOGLE_KEY}/locations/global`;

const replicate = new Replicate({ token: process.env.REPLICATE_KEY });
const openai = new OpenAIApi(new Configuration({ apiKey: process.env.OPENAI_KEY }));
const bot = new TelegramBot(process.env.TELEGRAM_KEY, { polling: true });
const translation = new TranslationServiceClient();

const context = readContext();
const skip = readSkip();
const trial = readTrial();
const opened = readOpened();
const temp = readTemp();
const time = readTime();
const money = readMoney();
const chatSuffix = readChatSuffix();
const last = {};

bot.on("pre_checkout_query", async (query) => {
    console.log("Checkout from ", query.from);
    bot.answerPreCheckoutQuery(query.id, true);
});

bot.on("message", async (msg) => {
    try {
        if (protection(msg)) {
            return;
        }
        // Technical stuff
        const chatId = msg.chat.id;
        const msgL = msg.text?.toLowerCase();
        if (msg.text) {
            if (processCommand(chatId, msgL, msg.from?.language_code)) {
                return;
            }
        }
        if (msg.successful_payment) {
            console.log("Payment done for ", chatId, msg.successful_payment.invoice_payload);
            var d = new Date();
            d.setMonth(d.getMonth() + 1);
            opened[msg.successful_payment.invoice_payload ?? chatId] = d;
            writeOpened(opened);
            bot.sendMessage(
                msg.successful_payment.invoice_payload ?? chatId,
                msg.from?.language_code == "ru"
                    ? "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ. –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –æ–¥–∏–Ω –º–µ—Å—è—Ü ‚ù§Ô∏è‚Äçüî•"
                    : "Payment complete! Thank you. This bot is now available for use for a period of one month ‚ù§Ô∏è‚Äçüî•"
            );
            bot.sendMessage(
                1049277315,
                "–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –æ—Ç " +
                    msg?.from?.username +
                    " " +
                    msg?.from?.id +
                    " " +
                    msg.successful_payment.invoice_payload
            );
            return;
        }
        trial[chatId] = (trial[chatId] ?? 0) + 1;
        writeTrial(trial);
        if (!(new Date(opened[chatId]) > new Date())) {
            bot.sendMessage(
                chatId,
                msg.from?.language_code == "ru"
                    ? "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º —Ç—Ä–∏–∞–ª –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –Ω–∞–ø–ª—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚ù§Ô∏è –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ –Ω–µ–π üòä https://t.me/maxsoft_chat_gpt_group"
                    : "Sorry we can't provide you with a trial due to the large influx of users. Full functionality will appear after payment ‚ù§Ô∏è We invite you to join our group to try the bot üòä https://t.me/maxsoft_chat_gpt_group_en"
            );
            sendInvoice(chatId, msg.from?.language_code);
            trial[chatId] = trial[chatId] - 1;
            return;
        }
        if (
            !PROMO.includes(String(chatId)) &&
            ((chatId > 0 && trial[chatId] > MAX_REQUESTS) ||
                (chatId > 0 && money[chatId] > MAX_MONEY) ||
                (chatId < 0 && money[chatId] > MAX_GROUP_MONEY) ||
                (chatId < 0 && trial[chatId] > MAX_GROUP_REQUESTS))
        ) {
            console.error("Abuse detected for paid account", chatId);
            bot.sendMessage(
                chatId,
                msg.from?.language_code == "ru"
                    ? "–ü—Ä–∏–≤–µ—Ç! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ üòè –≠—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ - –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É! ‚ù§Ô∏è"
                    : "Hello! Unfortunately, you have exceeded your subscription request count üòè That's not a problem - you can always purchase a new one! ‚ù§Ô∏è"
            );
            trial[chatId] = 0;
            opened[chatId] = new Date();
            writeTrial(trial);
            writeOpened(opened);
            return;
        }

        // Brain activity
        context[chatId] = context[chatId]?.slice(-CONTEXT_SIZE * premium(chatId)) ?? "";
        if (time[chatId] && new Date() - new Date(time[chatId]) > CONTEXT_TIMEOUT * 1000) {
            context[chatId] = "";
        }
        time[chatId] = new Date();
        writeTime(time);
        writeContext(context);

        if (msg.photo) {
            // visual hemisphere (left)
            visualToText(chatId, msg);
        }
        if (!msg.text) {
            return;
        }
        // console.log(chatId, msg?.from?.username, msg.text);
        msg.text = msg.text?.substring(0, MAX_LENGTH * premium(chatId));
        if (msgL.startsWith("–ø–æ–≥—É–≥–ª–∏") || msgL.startsWith("–∑–∞–≥—É–≥–ª–∏") || msgL.startsWith("google")) {
            textToGoogle(chatId, msg.text.slice(7), msg.from?.language_code);
        } else {
            if (msgL.startsWith("–Ω–∞—Ä–∏—Å—É–π") || msgL.startsWith("draw") || msgL.startsWith("paint")) {
                // visual hemisphere (left)
                textToVisual(chatId, msgL, msg.from?.language_code);
            } else {
                // audio hemisphere (right)
                textToText(chatId, msg);
            }
        }
    } catch (e) {
        console.error(e.message);
    }
});

const processCommand = (chatId, msg, language_code) => {
    if (msg.startsWith("/command") || msg.startsWith("/help")) {
        bot.sendMessage(
            chatId,
            language_code == "ru"
                ? "–ù–∞—Ä–∏—Å—É–π <—á—Ç–æ-—Ç–æ>\n–ó–∞–≥—É–≥–ª–∏/–ü–æ–≥—É–≥–ª–∏ <—á—Ç–æ-—Ç–æ>\n–°–±—Ä–æ—Å\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 36.5 - 41.5\n–ü—Ä–æ–ø—É—Å–∫ <x>\n–†–µ–∂–∏–º <–ø—Ä–∏—Ç–≤–æ—Ä–∏—Å—å —á—Ç–æ —Ç—ã ...>\n–ß–µ—Ä–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π <–∑–∞–ø—Ä–æ—Å>\n/payment\n/terms\n/terms_group\n/status\n/support"
                : "Paint <some>\nDraw <some>\nGoogle <some>\nReset\nTemperature 36.5 - 41.5\nSkip <x>\nMode <pretend you are ...>\n/payment\n/terms\n/terms_group\n/status\n/support"
        );
        return true;
    }
    if (msg.startsWith("/start")) {
        bot.sendMessage(
            chatId,
            language_code == "ru"
                ? "–ü—Ä–∏–≤–µ—Ç! –Ø ChatGPT –±–æ—Ç. –Ø –º–æ–≥—É –≥–æ–≤–æ—Ä–∏—Ç—å —Å –≤–∞–º–∏ –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ. –Ø –º–æ–≥—É –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –≤—Å–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç. –Ø –º–æ–≥—É –∏—Å–∫–∞—Ç—å –≤ Google –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω—É–∂–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ üòä –ù–∞—à–∞ –≥—Ä—É–ø–ø–∞: https://t.me/maxsoft_chat_gpt_group"
                : "Hello! I'm ChatGPT. Feel free to speak to me in any language. I can Paint <anything> you want. You can also send me an image, and I will translate it to text. I can search Google for any information you need. Use /help for more options üòä Join our group: https://t.me/maxsoft_chat_gpt_group_en"
        );
        return true;
    }
    if (msg.startsWith("/terms_group")) {
        bot.sendMessage(
            chatId,
            language_code == "ru"
                ? "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ $15 –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ ChatGPT –±–æ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª—é–¥–µ–π), –≤–∫–ª—é—á–∞—è –ù–∞—Ä–∏—Å—É–π, –ó–∞–≥—É–≥–ª–∏, –∏ –¥—Ä—É–≥–∏–µ - —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü (–ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –±–æ—Ç –ø–æ—Ç—Ä–µ–±—É–µ—Ç –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ —Å–Ω–æ–≤–∞)"
                : "After making a payment of $15, you will have access to the ChatGPT bot for one month for entire group (unlimited numer of people), with full features (including Paint, Photo2Text, Google, and more) with limitations of 1000 requests per month (when the limit is exceeded, the bot will ask you to pay for subscription again)"
        );
        return true;
    }
    if (msg.startsWith("/terms")) {
        bot.sendMessage(
            chatId,
            language_code == "ru"
                ? "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ $10 –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞, –≤–∫–ª—é—á–∞—è –ù–∞—Ä–∏—Å—É–π, –ó–∞–≥—É–≥–ª–∏, –∏ –¥—Ä—É–≥–∏–µ –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
                : "After making a payment of $10, you will have access to the ChatGPT bot for one month, with full features (including Paint, Photo2Text, Google, and more) without any limitations"
        );
        return true;
    }

    if (msg.startsWith("/payment")) {
        sendInvoice(chatId, language_code);
        return true;
    }
    if (msg.startsWith("/support")) {
        bot.sendMessage(
            chatId,
            language_code == "ru"
                ? `–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @${ADMIN}`
                : `For any inquiries regarding refunds and cancellations please contact @${ADMIN}`
        );
        return true;
    }
    if (msg.startsWith("/usage")) {
        bot.sendMessage(chatId, getReport());
        return true;
    }
    if (msg.startsWith("/status")) {
        bot.sendMessage(
            chatId,
            language_code == "ru"
                ? opened[chatId] && new Date(opened[chatId]) > new Date()
                    ? "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ " + opened[chatId]
                    : "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
                : opened[chatId] && new Date(opened[chatId]) > new Date()
                ? "You have an active subscription until " + opened[chatId]
                : "You have no subscription"
        );
        return true;
    }
    if (msg === "—Å–±—Ä–æ—Å") {
        bot.sendMessage(chatId, "–õ–∏—á–Ω–æ—Å—Ç—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞");
        context[chatId] = "";
        chatSuffix[chatId] = "";
        writeChatSuffix(chatSuffix);
        return true;
    }
    if (msg === "reset") {
        bot.sendMessage(chatId, "Context cleared");
        context[chatId] = "";
        chatSuffix[chatId] = "";
        writeChatSuffix(chatSuffix);
        return true;
    }
    if (msg.startsWith("–ø—Ä–æ–ø—É—Å–∫ ")) {
        skip[chatId] = +msg.slice(8);
        writeSkip(skip);
        bot.sendMessage(chatId, "–û—Ç–≤–µ—á–∞—Ç—å —Ä–∞–∑ –≤ " + skip[chatId]);
        return true;
    }
    if (msg.startsWith("skip ")) {
        skip[chatId] = +msg.slice(5);
        writeSkip(skip);
        bot.sendMessage(chatId, "Skip " + skip[chatId]);
        return true;
    }
    if (msg.startsWith("–æ—Ç–≤–µ—á–∞—Ç—å —Ä–∞–∑ –≤ ")) {
        skip[chatId] = +msg.slice(15);
        writeSkip(skip);
        bot.sendMessage(chatId, "–û—Ç–≤–µ—á–∞—Ç—å —Ä–∞–∑ –≤ " + skip[chatId]);
        return true;
    }

    if (msg === "—Ä–µ–∂–∏–º" || msg === "—Ä–µ–∂–∏–º –æ–±—ã—á–Ω—ã–π") {
        chatSuffix[chatId] = "";
        context[chatId] = "";
        writeChatSuffix(chatSuffix);
        bot.sendMessage(chatId, "–†–µ–∂–∏–º –æ–±—ã—á–Ω—ã–π");
        return true;
    }
    if (msg.startsWith("—Ä–µ–∂–∏–º ")) {
        chatSuffix[chatId] = "(" + msg.slice(6) + ")";
        context[chatId] = "";
        writeChatSuffix(chatSuffix);
        bot.sendMessage(chatId, "–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        return true;
    }
    if (msg === "mode" || msg === "mode usual") {
        chatSuffix[chatId] = "";
        context[chatId] = "";
        writeChatSuffix(chatSuffix);
        bot.sendMessage(chatId, "Usual mode");
        return true;
    }
    if (msg.startsWith("mode ")) {
        chatSuffix[chatId] = "(" + msg.slice(5) + ")";
        context[chatId] = "";
        writeChatSuffix(chatSuffix);
        bot.sendMessage(chatId, "Mode set");
        return true;
    }

    if (msg.startsWith("—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ") || msg.startsWith("temperature ")) {
        temp[chatId] = +msg.slice(12)?.replace(",", ".");
        writeTemp(temp);
        bot.sendMessage(chatId, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ " + temp[chatId]);
        return true;
    }
};

const sendInvoice = (chatId, language_code) => {
    bot.sendInvoice(
        chatId,
        language_code == "ru" ? "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞" : "Need payment",
        language_code == "ru" ? "–ü–æ–¥–ø–∏—Å–∫–∞ ChatGPT –Ω–∞ 1 –º–µ—Å—è—Ü" : "1-month access to ChatGPT",
        chatId,
        process.env.STRIPE_KEY,
        "USD",
        [
            {
                label:
                    chatId > 0
                        ? language_code == "ru"
                            ? "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ P2P —á–∞—Ç—É"
                            : "full access to P2P chat"
                        : language_code == "ru"
                        ? "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É —á–∞—Ç—É"
                        : "full access to GROUP chat",
                amount: chatId > 0 ? 1000 : 1500,
            },
        ],
        {
            photo_url: "https://blog.maxsoft.tk/AI.png",
            need_name: false,
            need_phone_number: false,
            need_email: false,
            need_shipping_address: false,
        }
    );
};

const visualToText = async (chatId, msg) => {
    bot.sendChatAction(chatId, "typing");
    const intervalId = setInterval(() => {
        bot.sendChatAction(chatId, "typing")
            .then(() => {})
            .catch((e) => {
                console.error(e.message);
            });
    }, 2000);
    let prompt = await getPrompt(msg.photo, chatId);
    clearInterval(intervalId);
    if (prompt) {
        // link between left and right hemisphere (computer vision)
        bot.sendChatAction(chatId, "typing");
        last[chatId] = prompt;
        if (msg.from?.language_code == "ru") {
            prompt = await translate(prompt, "ru");
        }
        if (prompt) {
            context[chatId] = context[chatId] + prompt;
            writeContext(context);
            bot.sendMessage(chatId, prompt)
                .then(() => {})
                .catch((e) => {
                    console.error(e.message);
                });
        }
    }
};

const textToVisual = async (chatId, text, language_code) => {
    bot.sendChatAction(chatId, "typing");
    if (text === "–Ω–∞—Ä–∏—Å—É–π" || text === "draw" || text === "paint") {
        // link between right and left hemisphere (painting)
        text = last[chatId]?.replace("child", "");
    }
    if ((language_code != "en" && !text?.startsWith("draw")) || text?.startsWith("–Ω–∞—Ä–∏—Å—É–π")) {
        text = await translate(text?.replace("—Ä–µ–±–µ–Ω–∫–∞", ""), "en");
    }
    if (!text) {
        return;
    }
    bot.sendChatAction(chatId, "typing");
    const photo = await getArt(
        text +
            (text?.startsWith("draw")
                ? ""
                : ", deep focus, highly detailed, digital painting, artstation, 4K, smooth, sharp focus, illustration")
    );
    if (photo) {
        bot.sendPhoto(chatId, photo);
    }
};

const textToText = async (chatId, msg) => {
    context[chatId] += msg.text + ".";
    if (
        !(
            msg.text?.toLowerCase()?.startsWith("–æ—Ç–≤–µ—á–∞–π") ||
            msg.text?.toLowerCase()?.startsWith("–æ—Ç–≤–µ—Ç—å") ||
            msg.text?.toLowerCase()?.startsWith("answer") ||
            msg.text?.toLowerCase()?.startsWith("—á–µ—Ä–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
        ) &&
        trial[chatId] % (skip[chatId] ?? 1) != 0
    ) {
        trial[chatId] = trial[chatId] - 1;
        return;
    }
    const english = msg.from?.language_code != "en" && msg.text?.toLowerCase()?.startsWith("—á–µ—Ä–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π");
    if (english) {
        msg.text = msg.text.slice(17);
    }
    bot.sendChatAction(chatId, "typing");
    const intervalId = setInterval(() => {
        bot.sendChatAction(chatId, "typing")
            .then(() => {})
            .catch((e) => {
                console.error(e.message);
            });
    }, 2000);
    let prompt = context[chatId] + chatSuffix[chatId] ?? "";
    if (english) {
        prompt = await translate(msg.text, "en");
    }
    let response;
    if (prompt) {
        response = await getText(
            prompt,
            ((temp[chatId] ?? 36.5) - 36.5) / 10 + 0.5,
            MAX_TOKENS * premium(chatId),
            chatId
        );
    }
    if (english && response) {
        response = await translate(response, msg.from?.language_code);
    }
    clearInterval(intervalId);
    if (response) {
        last[chatId] = response;
        context[chatId] = context[chatId] + response;
        writeContext(context);
        bot.sendMessage(chatId, response)
            .then(() => {})
            .catch((e) => {
                console.error(e.message);
            });
    }
};

const textToGoogle = async (chatId, msg, language_code) => {
    bot.sendChatAction(chatId, "typing");
    const response = await google(msg, language_code);
    if (response) {
        last[chatId] = response;
        context[chatId] = context[chatId] + response;
        writeContext(context);
        bot.sendMessage(chatId, response)
            .then(() => {})
            .catch((e) => {
                console.error(e.message);
            });
    }
};

const getText = async (prompt, temperature, max_tokens, chatId) => {
    try {
        const completion = await openai.createCompletion({
            model: "text-davinci-003",
            prompt: prompt,
            max_tokens: max_tokens,
            temperature: temperature,
        });
        const response = completion?.data?.choices?.[0]?.text;
        const spent = (completion?.data?.usage?.total_tokens / 1000) * 0.02;
        if (spent) {
            money[chatId] = (money[chatId] ?? 0) + spent;
            writeMoney(money);
        }
        // console.log(response);
        return response;
    } catch (e) {
        console.error(e.message);
        if (e.message?.includes("429")) {
            bot.sendMessage(1049277315, e.message);
        }
    }
};

const getArt = async (prompt) => {
    const response = await fetch(
        "https://api.stability.ai/v1alpha/generation/stable-diffusion-512-v2-1/text-to-image",
        {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Accept: "image/png",
                Authorization: process.env.STABILITY_KEY,
            },
            body: JSON.stringify({
                cfg_scale: 7,
                clip_guidance_preset: "FAST_BLUE",
                height: 512,
                width: 512,
                samples: 1,
                steps: 30,
                text_prompts: [
                    {
                        text: prompt,
                        weight: 1,
                    },
                ],
            }),
        }
    );

    if (!response.ok) {
        console.error(`Stability AI error: ${(await response.text()).substring(0, 200)}`);
        return;
    }

    return response.buffer();
};

const getPrompt = async (photo, chatId) => {
    const file_id = photo[photo.length - 1].file_id;
    const fileUri = await bot.getFileLink(file_id);
    bot.sendChatAction(chatId, "typing");
    const img2prompt = await replicate.models.get("methexis-inc/img2prompt");
    return img2prompt.predict({ image: fileUri });
};

const premium = (chatId) => {
    if (opened[chatId] && chatId > 0) {
        return PREMIUM;
    } else {
        return 1;
    }
};

const blacklist = ["5889128020", "junklz", "drovorub_UI", "lucky_12345_lucky", "BELIAL_00", "glockmasters", "zixstass"];
let callsTimestamps = [];
let groupUsers = {};

// once per hour clean groupUsers
setInterval(() => {
    groupUsers = {};
}, 1000 * 60 * 60);

const protection = (msg) => {
    //if user is admin, allow all and switch on server
    if (msg?.from?.username == ADMIN) {
        var d = new Date();
        d.setMonth(d.getMonth() + 1);
        opened[msg.chat.id] = d;
        writeOpened(opened);
        //  groupUsers = {};
        return false;
    }

    // ignore blacklist
    if (blacklist.includes(msg?.from?.username) || blacklist.includes(msg?.from?.id)) {
        console.error("Abuse [blacklist] detected for ", msg.chat.id);
        return true;
    }

    // DDOS protection, call not more than 20 per minute for msg.chat.id
    if (PROMO.includes(String(msg.chat.id))) {
        // // do not reply if msg?.from?.id not in trials
        // if (!trial[msg?.from?.id]) {
        //     return true;
        // }
        groupUsers[msg?.from?.id] = (groupUsers[msg?.from?.id] ?? 0) + 1;
        if (groupUsers[msg?.from?.id] > MAX_PER_HOUR) {
            return true;
        }

        callsTimestamps.push(Date.now());
        callsTimestamps = callsTimestamps.filter((stamp) => Date.now() - stamp < 60000);
        if (callsTimestamps.length >= MAX_PER_MINUTE) {
            console.error("Abuse [1 minute] detected for ", msg.chat.id);
            opened[msg.chat.id] = new Date();
            return true;
        }
    }
};

const translate = async (text, target) => {
    try {
        const request = {
            parent: GOOGLE_PROJECT,
            contents: [text],
            mimeType: "text/plain",
            targetLanguageCode: target,
        };

        const [response] = await translation.translateText(request);
        return response.translations[0]?.translatedText;
    } catch (e) {
        console.error(e.message);
    }
};

const getReport = () => {
    let result = "";
    const add = (s) => {
        result += s + "\n";
    };
    add("Advertising costs");
    add("-----------");
    const adv = Object.keys(trial)
        .filter((t) => !opened[t] || PROMO.includes(t))
        .map((k) => {
            return trial[k] * REQUEST_PRICE;
        })
        .reduce((a, b) => a + b)
        .toFixed(2);
    add("Total " + adv + "$");
    add("");
    add("Operational costs");
    add("------------------");
    const operations = Object.keys(trial)
        .filter((t) => opened[t] && !PROMO.includes(t))
        .map((k) => {
            add(k + " " + trial[k] + " " + (trial[k] * REQUEST_PRICE).toFixed(2) + "$");
            return trial[k] * REQUEST_PRICE;
        })
        .reduce((a, b) => a + b)
        .toFixed(2);
    add("Total " + operations + "$");
    add("");
    add("Profit");
    add("------------------");
    const revenue = (Object.keys(opened).length - 3) * 5;
    add(revenue + "$ - " + adv + "$ - " + operations + "$ = " + (revenue - operations - adv).toFixed(2) + "$");

    add("");
    add("Conversion");
    add("------------------");
    add((((Object.keys(opened).length - 3) / Object.keys(trial).length) * 100).toFixed(2) + "%");
    return result;
};

process.env["NTBA_FIX_350"] = 1;
process.env["NODE_NO_WARNINGS"] = 1;
process.env["GOOGLE_APPLICATION_CREDENTIALS"] = "./google.json";
